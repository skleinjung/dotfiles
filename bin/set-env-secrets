#!/usr/bin/env bash

# Preqequisites:
#   - jq is installed and on the path
#   - lpass is installed and on the path
# Required environment variables:
#   HOSTNAME
#   LASTPASS_USERNAME

error=

# verifies that any dependency programs/scripts are installed
function check_dependencies {
  if ! command -v jq >/dev/null 2>&1; then
    error="[check_dependencies] Missing required dependency: jq is not installed"
    return 1
  fi

  if ! command -v lpass >/dev/null 2>&1; then
    error="[check_dependencies] Missing required dependency: lpass is not installed"
    return 1
  fi
}

# verifies that required environment variables are set
function check_environment {
  if [[ -z $LASTPASS_USERNAME ]]; then
    error="[check_environment] Missing required environment variable: LASTPASS_USERNAME"
    return 1
  fi
}

# verifies that the user has authenticated with LastPass
function ensure_authentication {
  if ! lpass status "${LASTPASS_USERNAME}" >/dev/null; then
    if ! lpass login "${LASTPASS_USERNAME}" 2>/dev/null >/dev/null; then
      echo "ensure_authentication: User cancelled authentication." >&2 
      return 1
    fi
  fi
}

# Retrieve env content, which consists of zero or more lines. Each line is a variable in the
# form of "<NAME>=$(echo -n "<BASE64_ENCODED_VALUE>" | base64 -d)". 
function get_env_content {
  # get JSON string for all passwords with the specified path
  envJson=$(
    lpass show "automation\\hosts\\${HOSTNAME}\\.env" 2>/dev/null\
      --fixed-strings \
      --expand-multi \
      --json
  )

  # if no passwords exist at that path, just set to an empty array
  if [[ $? != 0 ]]; then
    envJson="[]"
  fi

  echo "$envJson" | jq -r '.[] | "\(.name)=$(echo -n \"\(.note|@base64)\" | base64 -d)"'
}

if ! check_dependencies; then
  echo "${error}" 1>&2
  echo "Unable to fetch environment secrets." 1>&2
  return 2
fi

if ! check_environment; then
  echo "${error}" 1>&2
  echo "Unable to fetch environment secrets." 1>&2
  return 1
fi

if ! ensure_authentication; then
  echo "${error}" 1>&2
  echo "Unable to fetch environment secrets." 1>&2
  return 2
fi

mapfile -t variables < <(get_env_content)
for variable in "${variables[@]}"; do
  name=${variable%%=*}
  echo "Setting: ${name}"
  eval "export \"$variable\""
done

# -- todo 
# - allow for project env secrets
# - allow for user env secrets