#!/usr/bin/env bash
set -euo pipefail

# --------- Configuration file ---------
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
CONFIG_FILE="$XDG_CONFIG_HOME/auto-sso/config.yaml"

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Config file not found: $CONFIG_FILE" >&2
  exit 1
fi

# yq is required to parse the YAML
if ! command -v yq &>/dev/null; then
  echo "‚ùå yq is required but not installed. Please 'brew install yq' or equivalent." >&2
  exit 1
fi

# --------- Defaults & validation ---------
# workers: default 4
WORKERS=$(yq e '.workers // 4' "$CONFIG_FILE")
if ! [[ "$WORKERS" =~ ^[0-9]+$ ]]; then
  echo "‚ùå Invalid 'workers' value in config: $WORKERS" >&2
  exit 1
fi

# staticConfig: default empty
STATIC_CONFIG=$(yq e '.staticConfig // ""' "$CONFIG_FILE")

# ssoSessions must be a non-empty list
NUM_SESSIONS=$(yq e '.ssoSessions | length' "$CONFIG_FILE")
if [[ "$NUM_SESSIONS" -lt 1 ]]; then
  echo "‚ùå 'ssoSessions' must be a non-empty list in $CONFIG_FILE" >&2
  exit 1
fi

# --------- Build SSO_SESSIONS mapping ---------
declare -A SSO_SESSIONS=()
for idx in $(seq 0 $((NUM_SESSIONS-1))); do
  name=$(yq e ".ssoSessions[$idx].name" "$CONFIG_FILE")
  start_url=$(yq e ".ssoSessions[$idx].startUrl" "$CONFIG_FILE")
  region=$(yq e ".ssoSessions[$idx].region // \"us-east-1\"" "$CONFIG_FILE")

  # Validate required fields
  if [[ -z "$name" || "$name" == "null" ]]; then
    echo "‚ùå Missing 'name' for ssoSessions[$idx]" >&2
    exit 1
  fi
  if [[ -z "$start_url" || "$start_url" == "null" ]]; then
    echo "‚ùå Missing 'startUrl' for ssoSessions[$idx]" >&2
    exit 1
  fi

  # Session name ‚Üí "startUrl|region|loginProfileName"
  SSO_SESSIONS["$name"]="$start_url|$region|${name}-auto-sso"
done

# --------- AWS Config files ---------
OUTPUT_FILE="$HOME/.aws/config"
mkdir -p "$(dirname "$OUTPUT_FILE")"
> "$OUTPUT_FILE"

# ------------------------
# Write [sso-session] blocks
# ------------------------
echo "üìù Writing sso-session blocks..."
for session in "${!SSO_SESSIONS[@]}"; do
  IFS='|' read -r url region loginProfile <<<"${SSO_SESSIONS[$session]}"
  cat <<EOF >>"$OUTPUT_FILE"
[sso-session $session]
sso_start_url = $url
sso_region = $region
sso_registration_scopes = sso:account:access

EOF
done

# ------------------------
# Write default profiles for each org (only used to bootstrap the other profiles)
# ------------------------
echo "üìù Writing bootstrap profiles..."
echo "# >>> BEGIN AUTO-SSO >>>" >> "$OUTPUT_FILE"
for session in "${!SSO_SESSIONS[@]}"; do
  IFS='|' read -r _ _ loginProfile <<<"${SSO_SESSIONS[$session]}"
  cat <<EOF >>"$OUTPUT_FILE"
[profile $loginProfile]
sso_session = $session

EOF
done
echo "# <<< END AUTO-SSO <<<" >> "$OUTPUT_FILE"

# ------------------------
# Append any user-provided staticConfig YAML block
# ------------------------
if [[ -n "$STATIC_CONFIG" && "$STATIC_CONFIG" != "null" ]]; then
  echo "üìù Appending staticConfig..."
  printf "%s

" "$STATIC_CONFIG" >>"$OUTPUT_FILE"
fi

# ------------------------
# Refresh and enumerate profiles dynamically
# ------------------------
for session in "${!SSO_SESSIONS[@]}"; do
  IFS='|' read -r url region loginProfile <<<"${SSO_SESSIONS[$session]}"

  echo
  echo "üîê Logging in for '$session' via profile '$loginProfile'..."
  aws-refresh-sso "$loginProfile"

  echo "üîë Fetching access token..."
  SSO_TOKEN=$(aws-get-sso-access-token "$url")

  echo "üìá Listing accounts..."
  ACCOUNTS=$(aws sso list-accounts \
    --region "$region" \
    --access-token "$SSO_TOKEN" \
    --query 'accountList[].accountId' \
    --output text)

  # export for child shells
  export SSO_TOKEN SSO_REGION="$region" SESSION_NAME="$session" OUTPUT_FILE

  # Parallelize per-account role lookups
  printf "%s
" $ACCOUNTS | \
    xargs -P"$WORKERS" -I{} bash -c '
      acct="$1"
      aws sso list-account-roles \
        --region "$SSO_REGION" \
        --access-token "$SSO_TOKEN" \
        --account-id "$acct" \
        --query "roleList[].roleName" \
        --output text \
      | tr "\t" "\n" \
      | sed "s|^|$acct |"
    ' _ {} | while read -r ACCOUNT_ID ROLE; do

      PROFILE_NAME="${ACCOUNT_ID}-${ROLE}"
      echo "    ‚ûï Writing profile [$PROFILE_NAME]"

      cat <<EOF >>"$OUTPUT_FILE"
[profile $PROFILE_NAME]
sso_session    = $SESSION_NAME
sso_account_id = $ACCOUNT_ID
sso_role_name  = $ROLE
region         = $SSO_REGION

EOF
    done
done

echo
echo "üßπ Cleaning up auto-SSO profiles..."
sed -i.bak '/^# >>> BEGIN AUTO-SSO >>>/,/^# <<< END AUTO-SSO <</d' $OUTPUT_FILE
rm -f "${OUTPUT_FILE}.bak"

echo
echo "‚úÖ AWS config written to $OUTPUT_FILE"
