#!/usr/bin/env bash

# Define your orgs here
declare -A ORGS
# Value: start-url|region|profile-name|default-profile-account-id|default-profile-role-name
ORGS["twin-digital"]="https://d-9067c161a5.awsapps.com/start/|us-east-1|twin-digital-login"
ORGS["pegasus"]="https://d-9a67674f2d.awsapps.com/start/|us-east-2|pegasus-login"

# other config
OUTPUT_FILE="$HOME/.aws/config"
CONFIG_STATIC_FILE="$HOME/.aws/config-static"
PARALLEL_JOBS=4

# Start with a clean config file
mkdir -p "$(dirname "$OUTPUT_FILE")"
> "$OUTPUT_FILE"

# ------------------------
# Write [sso-session] blocks
# ------------------------
echo "üìù Writing sso-session blocks..."
for session_name in "${!ORGS[@]}"; do
  IFS="|" read -r sso_url sso_region default_profile default_account_id default_role <<< "${ORGS[$session_name]}"

  cat <<EOF >> "$OUTPUT_FILE"
[sso-session ${session_name}]
sso_start_url = ${sso_url}
sso_region = ${sso_region}
sso_registration_scopes = sso:account:access

EOF
done

# ------------------------
# Write default profiles for each org
# ------------------------
echo "üìù Writing default profile blocks..."
for session_name in "${!ORGS[@]}"; do
  IFS="|" read -r _ sso_region default_profile default_account_id default_role <<< "${ORGS[$session_name]}"

  cat <<EOF >> "$OUTPUT_FILE"
[profile ${default_profile}]
sso_session = ${session_name}

EOF
done

# ------------------------
# Append config-static if it exists
# ------------------------
if [[ -f "$CONFIG_STATIC_FILE" ]]; then
  echo "üìù Copying static config from $CONFIG_STATIC_FILE"
  cat "$CONFIG_STATIC_FILE" >> "$OUTPUT_FILE"
  echo "" >> "$OUTPUT_FILE"
else
  echo "üìù No static config found at $CONFIG_STATIC_FILE"
fi

# ------------------------
# Refresh and enumerate profiles dynamically
# ------------------------
for session_name in "${!ORGS[@]}"; do
  IFS="|" read -r sso_url sso_region static_profile <<< "${ORGS[$session_name]}"

  echo
  echo "üîê Logging in for $session_name (via profile: $static_profile)..."
  aws-refresh-sso "$static_profile" || exit 1

  echo "üîë Getting access token..."
  SSO_ACCESS_TOKEN="$(aws-get-sso-access-token "${sso_url}")"
  if [[ -z "$SSO_ACCESS_TOKEN" ]]; then
    echo "‚ùå Failed to get SSO token for $session_name"
    continue
  fi

  echo "üìá Listing accounts for $session_name..."
  ACCOUNTS=$(aws sso list-accounts \
    --region "$sso_region" \
    --access-token "$SSO_ACCESS_TOKEN" \
    --query "accountList[].accountId" \
    --output text)

  # export so bash -c can see them
  export SSO_ACCESS_TOKEN sso_region session_name OUTPUT_FILE

  # produce lines "ACCOUNT_ID ROLE" in parallel
  printf "%s\n" $ACCOUNTS | \
    xargs -P"$PARALLEL_JOBS" -I{} bash -c '
      # note: $1 is the account ID substituted by xargs
      acct="$1"
      # list roles for that account
      aws sso list-account-roles \
        --access-token "$SSO_ACCESS_TOKEN" \
        --region       "$sso_region" \
        --account-id   "$acct" \
        --query        "roleList[].roleName" \
        --output       text \
      | tr "\t" "\n" \
      | sed "s|^|$acct |"
    ' _ {} | while read -r ACCOUNT_ID ROLE; do
    # skip the bootstrap/default if you want
    if [[ "$ACCOUNT_ID" == "$DEFAULT_ACCOUNT" && "$ROLE" == "$DEFAULT_ROLE" ]]; then
      continue
    fi

    PROFILE_NAME="${ACCOUNT_ID}-${ROLE}"
    echo "    ‚ûï Writing profile: [$PROFILE_NAME]"

    cat <<EOF >> "$OUTPUT_FILE"
[profile ${PROFILE_NAME}]
sso_session    = ${session_name}
sso_account_id = ${ACCOUNT_ID}
sso_role_name  = ${ROLE}
region         = ${sso_region}

EOF
  done
done

echo "‚úÖ Finished writing AWS config to $OUTPUT_FILE"
